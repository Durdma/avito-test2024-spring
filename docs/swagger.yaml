basePath: /api/v1
definitions:
  httpv1.UserInput:
    properties:
      is_admin:
        type: boolean
      tag_id:
        type: integer
    required:
    - is_admin
    type: object
  httpv1.bannersAddContent:
    properties:
      text:
        type: string
      title:
        type: string
      url:
        type: string
    required:
    - text
    - title
    - url
    type: object
  httpv1.bannersAddInput:
    properties:
      content:
        $ref: '#/definitions/httpv1.bannersAddContent'
      feature_id:
        type: integer
      is_active:
        type: boolean
      tags_ids:
        items:
          type: integer
        type: array
    required:
    - content
    - feature_id
    - is_active
    - tags_ids
    type: object
  httpv1.errorResponse:
    properties:
      error:
        type: string
    type: object
  models.AdminBanner:
    properties:
      banner_id:
        type: integer
      content:
        $ref: '#/definitions/models.Banner'
      created_at:
        type: string
      feature_id:
        $ref: '#/definitions/models.Feature'
      is_active:
        type: boolean
      tags_ids:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      updated_at:
        type: string
    type: object
  models.Banner:
    properties:
      text:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  models.Feature:
    properties:
      feature_id:
        type: integer
    type: object
  models.Tag:
    properties:
      tag_id:
        type: integer
    type: object
  models.User:
    properties:
      id:
        type: integer
      is_admin:
        type: boolean
      tag_id:
        type: integer
    type: object
  service.bannersUpdateContent:
    properties:
      text:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  service.bannersUpdateInput:
    properties:
      content:
        $ref: '#/definitions/service.bannersUpdateContent'
      feature_id:
        type: integer
      is_active:
        type: boolean
      tags_ids:
        items:
          type: integer
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для управления баннерами
  title: Avito Banners API
  version: "1.0"
paths:
  /banner:
    get:
      consumes:
      - application/json
      description: Этот эндпоинт предназначен для получения всех баннеров с возможностью
        фильтрации по идентификатору фичи и/или тега.
      operationId: get-banners
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Идентификатор фичи
        in: query
        name: feature_id
        type: integer
      - description: Идентификатор тега
        in: query
        name: tag_id
        type: integer
      - description: Лимит
        in: query
        name: limit
        type: integer
      - description: Оффсет
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AdminBanner'
            type: array
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - Bearer: []
      summary: Получение всех баннеров c фильтрацией по фиче и/или тегу
      tags:
      - banner
    post:
      consumes:
      - application/json
      description: This endpoint allows an admin to create a new banner.
      operationId: create-banner
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Banner creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/httpv1.bannersAddInput'
      produces:
      - application/json
      responses:
        "201":
          description: Banner created successfully
          schema:
            type: integer
        "400":
          description: Invalid data provided
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "401":
          description: Unauthorized access
          schema:
            type: string
        "403":
          description: Forbidden access
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      security:
      - Bearer: []
      summary: Creates a new banner.
      tags:
      - banner
  /banner/{id}:
    delete:
      description: Этот эндпоинт предназначен для удаления баннера по его идентификатору.
      operationId: delete-banner
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Идентификатор баннера
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Баннер успешно удален
          schema:
            type: string
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "404":
          description: Баннер для тэга не найден
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      security:
      - Bearer: []
      summary: Удаление баннера по идентификатору
      tags:
      - banner
    patch:
      consumes:
      - application/json
      description: Этот эндпоинт предназначен для обновления содержимого баннера по
        его идентификатору.
      operationId: update-banner
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Идентификатор баннера
        in: path
        name: id
        required: true
        type: integer
      - description: Запрос на обновление баннера
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/service.bannersUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "404":
          description: Баннер не найден
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      security:
      - Bearer: []
      summary: Обновление содержимого баннера
      tags:
      - banner
  /features:
    get:
      description: Получение всех фич
      operationId: get-features
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Лимит
        in: query
        name: limit
        type: integer
      - description: Оффсет
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Feature'
            type: array
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - Bearer: []
      summary: Получение всех фич
      tags:
      - feature
    post:
      description: Создание новой фичи
      operationId: create-feature
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "201":
          description: Фича успешно создана
          schema:
            type: string
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      security:
      - Bearer: []
      summary: Creates a new feature
      tags:
      - feature
  /features/{id}:
    delete:
      description: Удаление фичи
      operationId: delete-feature
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Идентификатор фичи
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Фича успешно удален
          schema:
            type: string
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      security:
      - Bearer: []
      summary: Deletes a feature
      tags:
      - feature
  /tags:
    get:
      description: Получение всех тэгов
      operationId: get-tags
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Лимит
        in: query
        name: limit
        type: integer
      - description: Оффсет
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tag'
            type: array
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - Bearer: []
      summary: Получение всех тэгов
      tags:
      - tag
    post:
      description: Создание нового тэга
      operationId: create-tag
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "201":
          description: Тэг успешно создан
          schema:
            type: string
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      security:
      - Bearer: []
      summary: Creates a new tag
      tags:
      - tag
  /tags/{id}:
    delete:
      description: Удаление тэга
      operationId: delete-tag
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Идентификатор тэга
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Тэг успешно удален
          schema:
            type: string
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            type: string
        "403":
          description: Пользователь не имеет доступа
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      security:
      - Bearer: []
      summary: Deletes a tag
      tags:
      - tag
  /user_banner:
    get:
      consumes:
      - application/json
      description: This endpoint allows a user to get a banner based on their tag
        and feature ID.
      operationId: get-user-banner
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: User tag
        in: query
        name: tag_id
        required: true
        type: integer
      - description: Feature ID
        in: query
        name: feature_id
        required: true
        type: integer
      - default: false
        description: Get the latest information
        in: query
        name: use_last_revision
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: User banner
          schema:
            $ref: '#/definitions/models.Banner'
        "400":
          description: Invalid data provided
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "401":
          description: Unauthorized access
          schema:
            type: string
        "403":
          description: Forbidden access
          schema:
            type: string
        "404":
          description: Banner not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      security:
      - Bearer: []
      summary: Получение баннера для пользователя
      tags:
      - banner
  /users:
    get:
      description: Этот эндпоинт предназначен для получения всех пользователей с фильтрацией
        по тегу
      operationId: get-users
      parameters:
      - description: Идентификатор тега
        in: query
        name: tag_id
        type: integer
      - description: Лимит
        in: query
        name: limit
        type: integer
      - description: Оффсет
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получение всех пользователей с фильтрацией по тегу
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Создание нового пользователя
      operationId: create-user
      parameters:
      - description: User creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/httpv1.UserInput'
      responses:
        "201":
          description: Пользователь успешно создан
          schema:
            type: string
        "400":
          description: Invalid data provided
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      summary: Creates a new user
      tags:
      - user
  /users/{id}:
    delete:
      description: Этот эндпоинт предназначен для удаления пользователя по его идентификатору.
      operationId: delete-user
      parameters:
      - description: Идентификатор пользователя
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Пользователь успешно удален
          schema:
            type: string
        "404":
          description: Пользователь не найден
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      summary: Удаление пользователя по идентификатору
      tags:
      - user
    get:
      description: Этот эндпоинт предназначен для получения пользователя по его идентификатору.
      operationId: get-user
      parameters:
      - description: Идентификатор пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "404":
          description: Пользователь не найден
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      summary: Получение пользователя по идентификатору
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Этот эндпоинт предназначен для обновления пользователя по его идентификатору.
      operationId: update-user
      parameters:
      - description: Идентификатор пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Запрос на обновление пользователя
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/httpv1.UserInput'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
        "404":
          description: Пользователь не найден
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpv1.errorResponse'
      summary: Обновление пользователя
      tags:
      - user
swagger: "2.0"
